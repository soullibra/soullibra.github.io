{"version":3,"sources":["pages/home-page.tsx","components/not-found/not-found.tsx","pages/not-found-page.tsx","components/error-view/error-view.tsx","components/loading/loading.tsx","services/highlight-markdown.ts","components/note-view-content/note-view-content.tsx","components/note-view/note-view.constants.ts","components/note-view/note-view.tsx","pages/note-view-page.tsx","App.routes.tsx","components/notes-list/notes-list.tsx","App.tsx","constants/config.ts","serviceWorker.ts","index.tsx"],"names":["HomePage","NotFound","prop","message","className","NotFoundPage","ErrorView","error","length","Loading","info","hljs","registerLanguage","bash","ini","javascript","json","shell","HighlightMarkdown","highlightAll","highlightAllUnder","document","node","querySelectorAll","forEach","block","highlightBlock","NoteViewContent","html","divRef","useRef","useEffect","current","innerHTML","ref","NOTE_VIEW_ERRORS","NoteView","name","useState","markup","setMarkup","state","loading","setLoading","setError","url","axios","get","then","markdown","setTimeout","marked","data","e","catch","response","status","NoteViewPage","useParams","ROUTES","path","exact","children","NOTES","map","note","file","title","initialRoutes","filter","route","NotesList","routes","setRoutes","searchText","setSearchText","searched","includes","type","placeholder","value","onChange","event","target","idx","key","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.998afef6.chunk.js","sourcesContent":["import React from 'react';\n\nexport function HomePage() {\n  return <h1>Hi there!</h1>;\n}\n","import './not-found.scss';\n\nimport React from 'react';\n\ninterface IProp {\n  message?: string;\n}\n\nexport function NotFound(prop: IProp) {\n  const message = prop.message || 'Not found';\n  return (\n    <div className=\"not-found\">\n      <h1>404</h1>\n      {message}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { NotFound } from '../components/not-found/not-found';\n\nexport function NotFoundPage() {\n  return <NotFound message=\"Page not found\" />;\n}\n","import './error-view.scss';\n\nimport React from 'react';\n\ninterface IProp {\n  error?: string;\n}\n\nexport function ErrorView({ error }: IProp) {\n  return (\n    <div className=\"error-view\">\n      <h1>500</h1>\n      Unexpected error\n      {error && error.length && <>: {error}</>}\n    </div>\n  );\n}\n","import './loading.scss';\n\nimport React, { Fragment } from 'react';\n\ninterface IProp {\n  info?: string | null;\n}\n\nexport function Loading({ info }: IProp) {\n  return (\n    <div className=\"loading\">\n      loading\n      <span className=\"loading-dot\">.</span>\n      <span className=\"loading-dot\">.</span>\n      <span className=\"loading-dot\">.</span>\n      {info && (\n        <Fragment>\n          <br />\n          <span className=\"loading-info\">{info}</span>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n","import '../styles/highlight-markdown.scss';\n\n// @ts-ignore TS7016\nimport hljs from 'highlight.js/lib/core';\n// @ts-ignore TS7016\nimport bash from 'highlight.js/lib/languages/bash';\n// @ts-ignore TS7016\nimport ini from 'highlight.js/lib/languages/ini';\n// @ts-ignore TS7016\nimport javascript from 'highlight.js/lib/languages/javascript';\n// @ts-ignore TS7016\nimport json from 'highlight.js/lib/languages/json';\n// @ts-ignore TS7016\nimport shell from 'highlight.js/lib/languages/shell';\n\nhljs.registerLanguage('bash', bash);\nhljs.registerLanguage('ini', ini);\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('json', json);\nhljs.registerLanguage('shell', shell);\n\nconst CODE_ELEMENTS_SELECTOR = 'pre code';\n\nconst HighlightMarkdown = {\n  highlightAll: (): void => {\n    HighlightMarkdown.highlightAllUnder(document);\n  },\n  highlightAllUnder: (node: ParentNode): void => {\n    const codeElements = node.querySelectorAll<HTMLElement>(\n      CODE_ELEMENTS_SELECTOR\n    );\n    codeElements.forEach((block) => {\n      hljs.highlightBlock(block);\n    });\n  },\n};\n\nexport default HighlightMarkdown;\n","import './note-view-content.scss';\n\nimport React, { useEffect, useRef } from 'react';\n\nimport HighlightMarkdown from '../../services/highlight-markdown';\n\ninterface IProp {\n  html: string;\n}\n\nexport function NoteViewContent({ html }: IProp) {\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (divRef.current) {\n      divRef.current.innerHTML = html;\n\n      HighlightMarkdown.highlightAllUnder(divRef.current);\n    }\n  });\n\n  return <article ref={divRef} className=\"note-view-content\"></article>;\n}\n","export const NOTE_VIEW_ERRORS = {\n  DEFAULT: '',\n  NOT_FOUND: 'Note not found',\n  PARSE_ERROR: 'Failed to convert to html',\n};\n","import './note-view.scss';\n\nimport axios from 'axios';\nimport marked from 'marked';\nimport React, { useEffect, useState } from 'react';\n\nimport { ErrorView } from '../error-view/error-view';\nimport { Loading } from '../loading/loading';\nimport { NotFound } from '../not-found/not-found';\nimport { NoteViewContent } from '../note-view-content/note-view-content';\nimport { NOTE_VIEW_ERRORS } from './note-view.constants';\n\ninterface IProp {\n  name: string;\n}\n\nexport function NoteView({ name }: IProp) {\n  const [markup, setMarkup] = useState('');\n  const [loading, setLoading] = useState<{ state: boolean; info?: string }>({\n    state: false,\n  });\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const url = `/notes/${name}.md`;\n\n    setLoading({ state: true, info: `fetching ${url}` });\n\n    axios\n      .get<string>(url)\n      .then((markdown) => {\n        setLoading({ state: true, info: 'parsing' });\n        setError(null);\n\n        setTimeout(() => {\n          let markup = '';\n          try {\n            markup = marked(markdown.data);\n          } catch (e) {\n            setError(NOTE_VIEW_ERRORS.PARSE_ERROR);\n          }\n          setMarkup(markup);\n          setLoading({ state: false });\n        }, 0);\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 404) {\n          setError(NOTE_VIEW_ERRORS.NOT_FOUND);\n        } else {\n          setError(NOTE_VIEW_ERRORS.DEFAULT);\n        }\n        setLoading({ state: false });\n      });\n  }, [name]);\n\n  let content;\n  if (loading.state) {\n    content = <Loading info={loading.info} />;\n  } else if (error === NOTE_VIEW_ERRORS.NOT_FOUND) {\n    content = <NotFound message={NOTE_VIEW_ERRORS.NOT_FOUND} />;\n  } else if (error) {\n    content = <ErrorView error={error} />;\n  } else {\n    content = <NoteViewContent html={markup} />;\n  }\n\n  return content;\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { NoteView } from '../components/note-view/note-view';\n\nexport function NoteViewPage() {\n  const { name } = useParams<{ name: string }>();\n  return <NoteView name={name} />;\n}\n","import React from 'react';\n\nimport NOTES from './constants/notes.json';\nimport { HomePage } from './pages/home-page';\nimport { NotFoundPage } from './pages/not-found-page';\nimport { NoteViewPage } from './pages/note-view-page';\n\ninterface IRoute {\n  path: string;\n  exact?: boolean;\n  title?: string;\n  children?: Function;\n}\n\nexport const ROUTES: IRoute[] = [\n  {\n    path: '/',\n    exact: true,\n    children: () => <HomePage />,\n  },\n  ...NOTES.map((note) => ({\n    path: '/note/' + note.file,\n    title: note.title,\n  })),\n  {\n    path: '/note/:name',\n    children: () => <NoteViewPage />,\n  },\n  {\n    path: '*',\n    children: () => <NotFoundPage />,\n  },\n];\n","import './notes-list.scss';\n\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { ROUTES } from '../../App.routes';\n\nconst initialRoutes = ROUTES.filter((route) => route.title);\n\nexport function NotesList() {\n  const [routes, setRoutes] = useState(initialRoutes);\n  const [searchText, setSearchText] = useState('');\n\n  useEffect(() => {\n    const searched = initialRoutes.filter((route) => {\n      return (\n        route.title?.includes(searchText) || route.path.includes(searchText)\n      );\n    });\n    setRoutes(searched);\n  }, [searchText]);\n\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchText(event.target.value);\n  };\n\n  return (\n    <nav className=\"notes-list\">\n      <span className=\"notes-list_title\">Notes:</span>\n      <input\n        className=\"notes-list_search\"\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"Search:\"\n        value={searchText}\n        onChange={handleSearchChange}\n      />\n      <ul className=\"notes-list_list\">\n        {routes.map((route, idx) => (\n          <li key={idx}>\n            <Link to={route.path}>{route.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n","import './App.scss';\n\nimport React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\n\nimport { ROUTES } from './App.routes';\nimport { NotesList } from './components/notes-list/notes-list';\nimport { APP_NAME } from './constants/config';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <Link to=\"/\">{APP_NAME}</Link>\n      </header>\n      <aside className=\"app-sidenav\">\n        <NotesList />\n      </aside>\n      <main className=\"app-main\">\n        <Switch>\n          {ROUTES.filter((route) => route.children).map((route, idx) => (\n            <Route\n              key={idx}\n              exact={route.exact}\n              path={route.path}\n              children={route.children}\n            />\n          ))}\n        </Switch>\n      </main>\n      <footer className=\"app-footer\">\n        <span className=\"copyleft\" title=\"copyleft\"></span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","export const APP_NAME = 'My Notes';\n","/* eslint-disable no-use-before-define, no-param-reassign, no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}